# -*- coding: utf-8 -*-
"""Trie Data Structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ap7ug436L90zRLtZFHV-_5o4STtuZZGK
"""

from collections import defaultdict
class Trie:
  def __init__(self, char):
    self.value = char
    self.children = defaultdict()
  
  def getValue(self):
    return self.value

  def get_children(self):
    return self.children

  def hasChild(self, char):
    if char in self.children.keys():
      return True
    else:
      return False
    
  def insertChild(self, other_trie):
    self.children[other_trie.getValue()] = other_trie

#examples 
word = 'car'
container = list(word)
tries = []
for i in range(len(container)-1):
  holder = Trie(container[i])
  holder.insertChild(Trie(container[i + 1]))
  tries.append(holder)

dictionary = ["car", "card", "cards", "cot", "cots", "trie", "tried", "tries", "try"]
starter = Trie(" ")
mega_string = list(set("".join(dictionary)))
print(mega_string)
#First step: Make a trie for all of the chars in our dictionary
for i in mega_string:
  starter.insertChild(Trie(i))

#Second Step: Iterate through our original dictionary
for word in dictionary:
  for i in range(len(word)-1):
    holder = starter.get_children()[word[i]]
    if holder.hasChild(word[i]):
      continue
    else:
      holder.insertChild(starter.get_children()[word[i + 1]])

#At this point, we should have theoretically have built the trie

#Testing the code
example = dictionary[3]
for i in range(len(example)):
  node = starter.get_children()[example[i]]
  container = node.get_children().values()
  translate = [x.getValue() for x in container]
  print(node.getValue(), translate)

#From here, it looks like we were able to create the Trie structure -> now we have to code an algorithm that checks if a word is present

def isPresent(starter, example):
  for character in example:
    #resulting = isPresent(starter, character)
    if not character in starter.get_children().keys():
      return False
    else:
      noder = starter.get_children()[character]
      starter = noder
  return True

isPresent(starter, "cardz")